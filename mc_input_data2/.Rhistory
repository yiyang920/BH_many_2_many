options(scipen=999) #Prevent Scientific Notation
#Import Data (distances, employment totals, MDOT person data, and destination location ids)
setwd('E:/Codes/Trip-based Bus Zone Model (July 2021)/Input Data (trips)')
stop_zones = read.table("stop_zones.csv", sep = ",", header=TRUE) #track that include bus (Red, Blue or Yellow) stops
View(stop_zones)
View(stop_zones)
D = read.table("distance.csv", sep = ",", header=TRUE)
View(D)
View(D)
gm_wkTT = read.table("gm_walk_time_min.csv", sep = ",", header=TRUE)
gm_transTT = read.table("gm_transit_time_min.csv", sep = ",", header=TRUE)
gm_transdist = read.table("gm_transit_dist_km.csv", sep = ",", header=TRUE)
gm_autoTT = read.table("gm_auto_time_min.csv", sep = ",", header=TRUE)
gm_autodist = read.table("gm_auto_dist_km.csv", sep = ",", header=TRUE)
gm_wkTT = read.table("gm_walk_time_min.csv", sep = ",", header=TRUE)
gm_wkdist = read.table("gm_walk_dist_km.csv", sep = ",", header=TRUE)
setwd('E:/Codes/Trip-based Bus Zone Model (July 2021)/Input Data (trips)')
est_dat = read.table("mc_dat_trips_miss.csv", sep = ",", header=TRUE)
View(est_dat)
View(est_dat)
mdot_dat = est_dat[which(est_dat[,"dat_id"]==3),]
setwd('E:/Codes/Trip-based Bus Zone Model (July 2021)/Input Data (trips)')
per_emp = read.table("dests_temp_trips.csv", sep = ",", header=TRUE)
per_tdist = read.table("tdists_dat_trips.csv", sep = ",", header=TRUE)
dests_geo = read.table("tdests_geoid_trips.csv", sep = ",", header=TRUE)
per_ddist = read.table("tdests_ddist_trips.csv", sep = ",", header=TRUE)
per_bustt = read.table("tdests_bustt_trips.csv", sep = ",", header=TRUE)
per_drtt = read.table("tdests_drtt_trips.csv", sep = ",", header=TRUE)
per_wktt = read.table("tdests_wktt_trips.csv", sep = ",", header=TRUE)
#Data Prep
#Filter trips traveling in bus zones
zoneid = cbind(c(1:69), D[,1])
View(zoneid)
N = dim(mdot_dat)[1]
mdot_dat_busz = matrix(0, 1, dim(mdot_dat)[2])
View(mdot_dat_busz)
colnames(mdot_dat_busz) <- colnames(mdot_dat)
for (i in 1:N){
O_id = which(zoneid[,2]==mdot_dat[i,"geoid_o"])
D_id = which(zoneid[,2]==mdot_dat[i,"geoid_d"])
is_o = which(stop_zones==O_id)
is_d = which(stop_zones==D_id)
if(length(is_o)>0 & length(is_d)>0){mdot_dat_busz = rbind(mdot_dat_busz, mdot_dat[i,])}
}
mdot_dat_busz = mdot_dat_busz[-1,]
View(mdot_dat_busz)
View(mdot_dat_busz)
N = dim(mdot_dat_busz)[1]
#convert mode IDs
modeid = matrix(0,N,1)
{
for (i in 1:N){
if(mdot_dat_busz[i,"mode"]==1) {modeid[i] = 1}
if(mdot_dat_busz[i,"mode"]==4) {modeid[i] = 5}
if(mdot_dat_busz[i,"mode"]==5) {modeid[i] = 4}
if(mdot_dat_busz[i,"mode"]==8) {modeid[i] = 2}
if(mdot_dat_busz[i,"mode"]==9) {modeid[i] = 3}
}
}
View(modeid)
View(modeid)
View(zoneid)
View(zoneid)
View(stop_zones)
